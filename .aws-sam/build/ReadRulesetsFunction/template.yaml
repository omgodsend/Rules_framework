AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM Template for rules_demo integrating Lambda, Step
  Functions, and API Gateway

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: RulesDemoAPI
        paths:
          /start:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:states:action/StartExecution
                responses: {}
                httpMethod: POST
                type: aws_proxy
                requestTemplates:
                  application/json: |
                    {
                      "input": "$util.escapeJavaScript($input.json('$'))",
                      "stateMachineArn": "${MyStepFunction.Arn}"
                    }

  ReadRulesetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: built/rules/readRules.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DB_HOST: localhost
          DB_PORT: '5432'
          DB_USER: weblogic
          DB_PASSWORD: password
          DB_NAME: rules_db

  EvaluateRulesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: built/rules/evaluateRules.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DB_HOST: localhost
          DB_PORT: '5432'
          DB_USER: weblogic
          DB_PASSWORD: password
          DB_NAME: rules_db

  PrepareResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: built/rules/prepareResults.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DB_HOST: localhost
          DB_PORT: '5432'
          DB_USER: weblogic
          DB_PASSWORD: password
          DB_NAME: rules_db

  MyStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "StartAt": "ReadRulesets",
          "States": {
            "ReadRulesets": {
              "Type": "Task",
              "Resource": "${ReadRulesetsFunction.Arn}",
              "Next": "EvaluateRules"
            },
            "EvaluateRules": {
              "Type": "Task",
              "Resource": "${EvaluateRulesFunction.Arn}",
              "Next": "PrepareResults"
            },
            "PrepareResults": {
              "Type": "Task",
              "Resource": "${PrepareResultsFunction.Arn}",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt MyExecutionRole.Arn

  MyExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ReadRulesetsFunction.Arn
                  - !GetAtt EvaluateRulesFunction.Arn
                  - !GetAtt PrepareResultsFunction.Arn

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/start