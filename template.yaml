AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Direct Step Function invocation via API Gateway

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod

  MyStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "StartAt": "ReadRulesets",
          "States": {
            "ReadRulesets": {
              "Type": "Task",
              "Resource": "${ReadRulesetsFunction.Arn}",
              "Parameters": {
                "ruleType.$": "$.ruleType"
              },
              "Next": "EvaluateRules"
            },
            "EvaluateRules": {
              "Type": "Task",
              "Resource": "${EvaluateRulesFunction.Arn}",
              "Next": "PrepareResults"
            },
            "PrepareResults": {
              "Type": "Task",
              "Resource": "${PrepareResultsFunction.Arn}",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt MyExecutionRole.Arn

  ReadRulesetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: built/rules/readRules.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DB_HOST: 172.17.0.1
          DB_USER: weblogic
          DB_PASSWORD: password
          DB_NAME: rules_db
          DB_PORT: '5432'
      Events:
              ApiEvent:
                Type: Api
                Properties:
                  Path: /readrules
                  Method: post
                  RestApiId: !Ref MyApi

  EvaluateRulesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: built/rules/evaluateRules.handler
      Runtime: nodejs20.x

  LambdaQueryTest:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: built/testing/lamdaQueryTest.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          DB_HOST: 172.17.0.1
          DB_USER: weblogic
          DB_PASSWORD: password
          DB_NAME: rules_db
          DB_PORT: '5432'

  PrepareResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: built/rules/prepareResults.handler
      Runtime: nodejs20.x

  ApiGatewayStepFunctionIntegration:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApi
      ResourceId: !GetAtt 'MyApi.RootResourceId'
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:states:action/StartExecution'
        Credentials: !GetAtt MyExecutionRole.Arn
        RequestTemplates:
          application/json: |
            {
              "input": "$util.escapeJavaScript($input.json('$'))",
              "stateMachineArn": "${MyStepFunction.Arn}"
            }
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200

  MyExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt ReadRulesetsFunction.Arn
                  - !GetAtt EvaluateRulesFunction.Arn
                  - !GetAtt PrepareResultsFunction.Arn

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/prod/start'